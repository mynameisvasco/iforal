generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Regular
}

enum UserStatus {
  Invited
  Active
}

model User {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(90)
  email               String                @unique @db.VarChar(90)
  password            String                @db.VarChar(90)
  createdAt           DateTime              @default(now())
  role                Role                  @default(Regular)
  status              UserStatus            @default(Invited)
  document            Document[]
  documentPermissions DocumentPermissions[]
}

model Document {
  id            Int                   @id @default(autoincrement())
  title         String                @db.VarChar(255)
  createdAt     DateTime              @default(now())
  modifiedAt    DateTime              @updatedAt
  body          String                @db.Text
  user          User                  @relation(fields: [userId], references: [id])
  images        DocumentImages[]
  header        DocumentHeader?
  userId        Int
  isPublic      Boolean               @default(false)
  permissions   DocumentPermissions[]
  GlossaryEntry GlossaryEntry[]
}

model DocumentHeader {
  id             Int       @id @default(autoincrement())
  title          String    @db.VarChar(255)
  editors        Json
  funders        Json
  country        String    @db.VarChar(4)
  institution    String    @db.VarChar(255)
  repository     String    @db.VarChar(255)
  idno           String?   @db.VarChar(255)
  authors        Json
  altIdentifier  Json?
  settlement     String    @db.VarChar(255)
  publisher      String    @db.VarChar(255)
  publisherPlace String    @db.VarChar(255)
  publisherDate  DateTime
  license        String    @db.VarChar(255)
  originDate     DateTime
  originDateEnd  DateTime?
  originPlace    String    @db.VarChar(255)
  lang           String
  filiation      String    @default("")
  summary        String    @default("")
  encoding       String    @default("")
  objectDesc     String    @default("") @db.VarChar(255)
  supportDesc    String    @default("") @db.VarChar(255)
  support        String    @default("") @db.VarChar(255)
  condition      String    @default("")
  extent         String    @default("") @db.VarChar(255)
  height         Int       @default(0)
  width          Int       @default(0)
  layout         String    @default("") @db.VarChar(255)
  handDesc       String    @default("")
  decoDesc       String    @default("")
  additions      String    @default("")
  document       Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId     Int       @unique
}

model DocumentImages {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  position   Int
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int
}

model DocumentPermissions {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  type       Int      @default(0)
  userId     Int
  documentId Int
}

model Tag {
  id             Int     @id @default(autoincrement())
  name           String  @db.VarChar(255)
  friendlyName   String  @db.VarChar(255)
  isChildAllowed Boolean
  attributes     Json
  category       String
}

model GlossaryEntry {
  id           Int      @id @default(autoincrement())
  lemma        String   @db.VarChar(255)
  actualLema   String   @db.VarChar(255)
  actual       String   @db.VarChar(255)
  definition   String   @db.VarChar(255)
  tags         String   @db.VarChar(255)
  category     String   @db.VarChar(255)
  context      String   @default("") @db.VarChar(255)
  translations Json?
  document     Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId   Int

  @@index([lemma])
}
