generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Regular
}

enum UserStatus {
  Invited
  Active
}

model User {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(90)
  email               String                @unique @db.VarChar(90)
  password            String                @db.VarChar(90)
  createdAt           DateTime              @default(now())
  role                Role                  @default(Regular)
  status              UserStatus            @default(Invited)
  document            Document[]
  documentPermissions DocumentPermissions[]
}

model Document {
  id          Int                   @id @default(autoincrement())
  title       String                @db.VarChar(255)
  createdAt   DateTime              @default(now())
  modifiedAt  DateTime              @updatedAt
  body        String                @db.Text
  user        User                  @relation(fields: [userId], references: [id])
  images      DocumentImages[]
  header      DocumentHeader?
  userId      Int
  permissions DocumentPermissions[]
}

model DocumentHeader {
  id             Int      @id @default(autoincrement())
  title          String   @db.VarChar(255)
  editors        Json
  funders        String   @db.VarChar(255)
  country        String   @db.VarChar(4)
  institution    String   @db.VarChar(255)
  repository     String   @db.VarChar(255)
  idno           String   @db.VarChar(255)
  authors        Json
  altIdentifier  Json
  settlement     String   @db.VarChar(255)
  publisher      String   @db.VarChar(255)
  publisherPlace String   @db.VarChar(255)
  publisherDate  DateTime
  license        String   @db.VarChar(255)
  originDate     DateTime
  originPlace    String   @db.VarChar(255)
  lang           String
  filliation     String
  summary        String
  encoding       String
  document       Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId     Int      @unique
}

model DocumentImages {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  position   Int
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int
}

model DocumentPermissions {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  type       Int      @default(0)
  userId     Int
  documentId Int
}

model Tag {
  id             Int     @id @default(autoincrement())
  name           String  @db.VarChar(255)
  friendlyName   String  @db.VarChar(255)
  isChildAllowed Boolean
  attributes     Json
  category       String
}
